// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player> {
} _Player_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, t1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, t2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, size_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, size_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bullet_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bullet_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bullet_life_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bullet_dir_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 19, sizeof(Player)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Player_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Player_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\"\224\002\n\006Player\022\014\n\004name\030\001 \001(\t"
      "\022\n\n\002hp\030\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\r\n\005st"
      "ate\030\005 \001(\005\022\030\n\003dir\030\006 \001(\0162\013.Player.Dir\022\n\n\002t"
      "1\030\007 \001(\002\022\n\n\002t2\030\010 \001(\002\022\016\n\006size_x\030\t \001(\002\022\016\n\006s"
      "ize_y\030\n \001(\002\022\020\n\010bullet_x\030\013 \001(\002\022\020\n\010bullet_"
      "y\030\014 \001(\002\022\023\n\013bullet_life\030\r \001(\010\022\022\n\nbullet_d"
      "ir\030\016 \001(\005\",\n\003Dir\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\010\n\004LEF"
      "T\020\002\022\t\n\005RIGHT\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* Player_Dir_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool Player_Dir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Player_Dir Player::UP;
const Player_Dir Player::DOWN;
const Player_Dir Player::LEFT;
const Player_Dir Player::RIGHT;
const Player_Dir Player::Dir_MIN;
const Player_Dir Player::Dir_MAX;
const int Player::Dir_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kNameFieldNumber;
const int Player::kHpFieldNumber;
const int Player::kXFieldNumber;
const int Player::kYFieldNumber;
const int Player::kStateFieldNumber;
const int Player::kDirFieldNumber;
const int Player::kT1FieldNumber;
const int Player::kT2FieldNumber;
const int Player::kSizeXFieldNumber;
const int Player::kSizeYFieldNumber;
const int Player::kBulletXFieldNumber;
const int Player::kBulletYFieldNumber;
const int Player::kBulletLifeFieldNumber;
const int Player::kBulletDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&hp_, &from.hp_,
    reinterpret_cast<char*>(&bullet_dir_) -
    reinterpret_cast<char*>(&hp_) + sizeof(bullet_dir_));
  // @@protoc_insertion_point(copy_constructor:Player)
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hp_, 0, reinterpret_cast<char*>(&bullet_dir_) -
    reinterpret_cast<char*>(&hp_) + sizeof(bullet_dir_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:Player)
  SharedDtor();
}

void Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player& Player::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:Player)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&hp_, 0, reinterpret_cast<char*>(&t2_) -
      reinterpret_cast<char*>(&hp_) + sizeof(t2_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&size_x_, 0, reinterpret_cast<char*>(&bullet_dir_) -
      reinterpret_cast<char*>(&size_x_) + sizeof(bullet_dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Player.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Player.Dir dir = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Player_Dir_IsValid(value)) {
            set_dir(static_cast< ::Player_Dir >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float t1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_t1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float t2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_t2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_size_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_size_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bullet_x = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_bullet_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bullet_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bullet_y = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_bullet_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bullet_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bullet_life = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_bullet_life();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bullet_life_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bullet_dir = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_bullet_dir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional .Player.Dir dir = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->dir(), output);
  }

  // optional float t1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->t1(), output);
  }

  // optional float t2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->t2(), output);
  }

  // optional float size_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->size_x(), output);
  }

  // optional float size_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->size_y(), output);
  }

  // optional float bullet_x = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->bullet_x(), output);
  }

  // optional float bullet_y = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->bullet_y(), output);
  }

  // optional bool bullet_life = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->bullet_life(), output);
  }

  // optional int32 bullet_dir = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bullet_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional int32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional .Player.Dir dir = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->dir(), target);
  }

  // optional float t1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->t1(), target);
  }

  // optional float t2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->t2(), target);
  }

  // optional float size_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->size_x(), target);
  }

  // optional float size_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->size_y(), target);
  }

  // optional float bullet_x = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->bullet_x(), target);
  }

  // optional float bullet_y = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->bullet_y(), target);
  }

  // optional bool bullet_life = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->bullet_life(), target);
  }

  // optional int32 bullet_dir = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bullet_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .Player.Dir dir = 6;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional float t1 = 7;
    if (has_t1()) {
      total_size += 1 + 4;
    }

    // optional float t2 = 8;
    if (has_t2()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float size_x = 9;
    if (has_size_x()) {
      total_size += 1 + 4;
    }

    // optional float size_y = 10;
    if (has_size_y()) {
      total_size += 1 + 4;
    }

    // optional float bullet_x = 11;
    if (has_bullet_x()) {
      total_size += 1 + 4;
    }

    // optional float bullet_y = 12;
    if (has_bullet_y()) {
      total_size += 1 + 4;
    }

    // optional bool bullet_life = 13;
    if (has_bullet_life()) {
      total_size += 1 + 1;
    }

    // optional int32 bullet_dir = 14;
    if (has_bullet_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_dir());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000040u) {
      t1_ = from.t1_;
    }
    if (cached_has_bits & 0x00000080u) {
      t2_ = from.t2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      size_x_ = from.size_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      size_y_ = from.size_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      bullet_x_ = from.bullet_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      bullet_y_ = from.bullet_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      bullet_life_ = from.bullet_life_;
    }
    if (cached_has_bits & 0x00002000u) {
      bullet_dir_ = from.bullet_dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  name_.Swap(&other->name_);
  std::swap(hp_, other->hp_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(state_, other->state_);
  std::swap(dir_, other->dir_);
  std::swap(t1_, other->t1_);
  std::swap(t2_, other->t2_);
  std::swap(size_x_, other->size_x_);
  std::swap(size_y_, other->size_y_);
  std::swap(bullet_x_, other->bullet_x_);
  std::swap(bullet_y_, other->bullet_y_);
  std::swap(bullet_life_, other->bullet_life_);
  std::swap(bullet_dir_, other->bullet_dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// optional string name = 1;
bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Player.name)
  return name_.GetNoArena();
}
void Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Player.name)
}
#if LANG_CXX11
void Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Player.name)
}
#endif
void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Player.name)
}
void Player::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Player.name)
}
::std::string* Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Player.name)
}

// optional int32 hp = 2;
bool Player::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Player::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
void Player::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Player::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
::google::protobuf::int32 Player::hp() const {
  // @@protoc_insertion_point(field_get:Player.hp)
  return hp_;
}
void Player::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Player.hp)
}

// optional float x = 3;
bool Player::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Player::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void Player::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void Player::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Player::x() const {
  // @@protoc_insertion_point(field_get:Player.x)
  return x_;
}
void Player::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Player.x)
}

// optional float y = 4;
bool Player::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Player::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void Player::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void Player::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Player::y() const {
  // @@protoc_insertion_point(field_get:Player.y)
  return y_;
}
void Player::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Player.y)
}

// optional int32 state = 5;
bool Player::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Player::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void Player::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void Player::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 Player::state() const {
  // @@protoc_insertion_point(field_get:Player.state)
  return state_;
}
void Player::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Player.state)
}

// optional .Player.Dir dir = 6;
bool Player::has_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Player::set_has_dir() {
  _has_bits_[0] |= 0x00000020u;
}
void Player::clear_has_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
void Player::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
::Player_Dir Player::dir() const {
  // @@protoc_insertion_point(field_get:Player.dir)
  return static_cast< ::Player_Dir >(dir_);
}
void Player::set_dir(::Player_Dir value) {
  assert(::Player_Dir_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Player.dir)
}

// optional float t1 = 7;
bool Player::has_t1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Player::set_has_t1() {
  _has_bits_[0] |= 0x00000040u;
}
void Player::clear_has_t1() {
  _has_bits_[0] &= ~0x00000040u;
}
void Player::clear_t1() {
  t1_ = 0;
  clear_has_t1();
}
float Player::t1() const {
  // @@protoc_insertion_point(field_get:Player.t1)
  return t1_;
}
void Player::set_t1(float value) {
  set_has_t1();
  t1_ = value;
  // @@protoc_insertion_point(field_set:Player.t1)
}

// optional float t2 = 8;
bool Player::has_t2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Player::set_has_t2() {
  _has_bits_[0] |= 0x00000080u;
}
void Player::clear_has_t2() {
  _has_bits_[0] &= ~0x00000080u;
}
void Player::clear_t2() {
  t2_ = 0;
  clear_has_t2();
}
float Player::t2() const {
  // @@protoc_insertion_point(field_get:Player.t2)
  return t2_;
}
void Player::set_t2(float value) {
  set_has_t2();
  t2_ = value;
  // @@protoc_insertion_point(field_set:Player.t2)
}

// optional float size_x = 9;
bool Player::has_size_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Player::set_has_size_x() {
  _has_bits_[0] |= 0x00000100u;
}
void Player::clear_has_size_x() {
  _has_bits_[0] &= ~0x00000100u;
}
void Player::clear_size_x() {
  size_x_ = 0;
  clear_has_size_x();
}
float Player::size_x() const {
  // @@protoc_insertion_point(field_get:Player.size_x)
  return size_x_;
}
void Player::set_size_x(float value) {
  set_has_size_x();
  size_x_ = value;
  // @@protoc_insertion_point(field_set:Player.size_x)
}

// optional float size_y = 10;
bool Player::has_size_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Player::set_has_size_y() {
  _has_bits_[0] |= 0x00000200u;
}
void Player::clear_has_size_y() {
  _has_bits_[0] &= ~0x00000200u;
}
void Player::clear_size_y() {
  size_y_ = 0;
  clear_has_size_y();
}
float Player::size_y() const {
  // @@protoc_insertion_point(field_get:Player.size_y)
  return size_y_;
}
void Player::set_size_y(float value) {
  set_has_size_y();
  size_y_ = value;
  // @@protoc_insertion_point(field_set:Player.size_y)
}

// optional float bullet_x = 11;
bool Player::has_bullet_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Player::set_has_bullet_x() {
  _has_bits_[0] |= 0x00000400u;
}
void Player::clear_has_bullet_x() {
  _has_bits_[0] &= ~0x00000400u;
}
void Player::clear_bullet_x() {
  bullet_x_ = 0;
  clear_has_bullet_x();
}
float Player::bullet_x() const {
  // @@protoc_insertion_point(field_get:Player.bullet_x)
  return bullet_x_;
}
void Player::set_bullet_x(float value) {
  set_has_bullet_x();
  bullet_x_ = value;
  // @@protoc_insertion_point(field_set:Player.bullet_x)
}

// optional float bullet_y = 12;
bool Player::has_bullet_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Player::set_has_bullet_y() {
  _has_bits_[0] |= 0x00000800u;
}
void Player::clear_has_bullet_y() {
  _has_bits_[0] &= ~0x00000800u;
}
void Player::clear_bullet_y() {
  bullet_y_ = 0;
  clear_has_bullet_y();
}
float Player::bullet_y() const {
  // @@protoc_insertion_point(field_get:Player.bullet_y)
  return bullet_y_;
}
void Player::set_bullet_y(float value) {
  set_has_bullet_y();
  bullet_y_ = value;
  // @@protoc_insertion_point(field_set:Player.bullet_y)
}

// optional bool bullet_life = 13;
bool Player::has_bullet_life() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Player::set_has_bullet_life() {
  _has_bits_[0] |= 0x00001000u;
}
void Player::clear_has_bullet_life() {
  _has_bits_[0] &= ~0x00001000u;
}
void Player::clear_bullet_life() {
  bullet_life_ = false;
  clear_has_bullet_life();
}
bool Player::bullet_life() const {
  // @@protoc_insertion_point(field_get:Player.bullet_life)
  return bullet_life_;
}
void Player::set_bullet_life(bool value) {
  set_has_bullet_life();
  bullet_life_ = value;
  // @@protoc_insertion_point(field_set:Player.bullet_life)
}

// optional int32 bullet_dir = 14;
bool Player::has_bullet_dir() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Player::set_has_bullet_dir() {
  _has_bits_[0] |= 0x00002000u;
}
void Player::clear_has_bullet_dir() {
  _has_bits_[0] &= ~0x00002000u;
}
void Player::clear_bullet_dir() {
  bullet_dir_ = 0;
  clear_has_bullet_dir();
}
::google::protobuf::int32 Player::bullet_dir() const {
  // @@protoc_insertion_point(field_get:Player.bullet_dir)
  return bullet_dir_;
}
void Player::set_bullet_dir(::google::protobuf::int32 value) {
  set_has_bullet_dir();
  bullet_dir_ = value;
  // @@protoc_insertion_point(field_set:Player.bullet_dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
